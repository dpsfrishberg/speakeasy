(function($){
function comment(comment_id, parent_id, user_id, tier) {
    var self = this;

    //define the properties of a comment
    self.comment_id = ko.observable(comment_id);
    self.parent_id = ko.observable(parent_id);
    self.user_id = ko.observable(user_id);

    var $append_to = $('#node-' + parent_id + ' .comments');
    $append_to.append('<div class="comment comment-tier-'+ tier+'" id="comment-' + comment_id + '"><div class="comment-user">' + user_id + '</div><div class="comment-nodes"></div></div>');
}

function node(node_id, parent_id, content) {
    self.id = ko.observable(node_id);
    self.id_ = ko.computed(function(){ return "#" + self.id() });
    self.content = ko.observable(content);
    self.parent_id = ko.observable(parent_id);
    
    if (parent_id) {
        var $append_to = $('#comment-' + parent_id + ' .comment-nodes');
	$append_to.append('<div class="node" id="node-' + node_id + '"><div class="node-content">'+self.content()+'</div><div class="node-' + node_id + '_comments comments-wrapper"><div class="comments"></div><div class="comments-reply"><form id="comments-reply-form-node-'+node_id+'" action="#"><textarea id="comments-reply-node-'+node_id+'" name="comments-reply-node-'+node_id+'"></textarea><input type="submit" id="comments-submit-node-' + node_id + '" name="comments-submit-node-' + node_id + '"/></form></div></div><a class="node-button" href="#"></a></div>');
    }
}

function documentSection(id, node) {
    var self = this;

    
    self.id = ko.observable(id);//define a var to hold the id
    self.id_ = ko.computed(function(){ return "#" + self.id() });//used to so you don't have to type "#" + self.id() a bunch of times
    self.content = ko.observable(node);//grab the content that was passed in
    self.comments = ko.observableArray();//define an array of comments

    self.applyComments = function(){//added the id node-1_comments to be able to get them individually in addition to as a collection
        self.content().append(
            '<span class="'+self.id()+'_comments comments-wrapper">' +
                '<div class="comments"></div>' +
                '<div class="comments-reply">'+
                '<form id="comments-reply-form-' + id + '" action="#">'+
		'<textarea id="comments-reply-' + id + '" name="comments-reply-' + id + '"/>'+
		'<input type="submit" id="comments-submit-' + id + '" name="comments-submit-' + id + '"/></form></div></span>');
    };

}

function buildFromTree(tree, tier) {
    if (!tier) tier = 0;
    
    var obj = {};
    
    var root_type = tree.type;
    var root_id = tree.id ? tree.id : null;
    
    if (!root_type) {
	var nodes = tree;
    }
    else if (root_type == 'comment'){
	var nodes = tree.nodes;
    }
    
    if (!root_type || root_type == 'comment') {
	for (var node_id in nodes) {
	    var treeNode = nodes[node_id];
	    vm.nodes.push(new node(node_id, root_id, treeNode.content));
	    if (treeNode.comments) {
		buildFromTree(treeNode, tier);
	    }
	}
    }
    else { //root_type == 'node'
	for (var comment_id in tree.comments) {
	    var treeComment = tree.comments[comment_id];
//	    console.log(tier);
	    vm.comments.push(new comment(comment_id, root_id, treeComment.user_id, tier));
	    if (treeComment.nodes) {
		buildFromTree(treeComment, tier+1);
	    }
	}
    }

}


function viewModel() {
    //Step 2 and so on below
    var self = this;

    self.nodes = ko.observableArray();

    //set up and array for the comments
    self.comments = ko.observableArray();

    //set up an array for the document section(need to think of a better name, all I could come up with)
    self.document = ko.observableArray();
    
    //self.breadcrumb = ko.observableArray();

    //bring in the comments and put them into usable objects (defined above)
    self.loadComments = function () {
        $.getJSON('/tree.json', function (data) {
		
	    buildFromTree(data);
        });
    };
    

    //parse the document
    self.parseDocument = function () {

        //for each of the element with the class 'node'
        $('.node').each(function(){
            var node = $(this); //grab the none

            //define a new documentSection and pass in the id and the node value(not sure if this is needed)
            var section = new documentSection(node.attr('id'), node);

            //run the init basically to load the comments
            section.applyComments();

            //keep track of it by putting it in the array of document sections
            self.document.push(section);
        });
    };
    
    //self.initBreadcrumb = function () {
	//$('#breadcrumb')
    //};

    //actually run the parseDocument
    self.parseDocument();

    //actually run the loadComments
    self.loadComments();

    
    
};


$(function() {
	$(document).on('click', 'input[type=submit]', function(e){
			$.post('/postcomment', {'node_id': $(e.target).attr('name').replace(/comments-submit-node-/, '').replace(/comments-submit-/, ''),
						'content': $(e.target).closest('.comments-reply').find('textarea').val()},
			       function(data, textStatus, jqXHR) {});
			
			if (e.preventDefault) e.preventDefault();
			return false;
		});
	
	$(document).on('click', 'a.node-button', function(e) {
			var $button = $(e.target);
			$button.toggleClass('node-button-open');
			var $node = $button.closest('.node');
			if ($button.hasClass('node-button-open'))	{
				$node.siblings('.node')
				.add($node.closest('.comment')
				     .siblings('.comment')
				     .children('.comment-nodes')
				     .children('.node')
				)
				.each(function(){
					$(this).children('.comments-wrapper').hide();
					$(this).children('.node-button').removeClass('node-button-open');
				});
			}
			var $comments = $node.children().filter('.comments-wrapper');
			$comments.toggle();
		});
	
});


var vm;
$(function() {
//Step 1
vm = new viewModel();
vm.nodes.push(1, 1, 'test');
//Step 3
ko.applyBindings(vm);
});
//I can explain this all this weekend

/*
    Notes: 
    -To get the actual value out of the object call whatever.id() because whaterver.id is a function, id() gets the actual value 
    -http://knockoutjs.com/documentation/introduction.html

*/
})(jQuery);